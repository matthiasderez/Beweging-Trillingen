clc
clear all
close all

%% Data inladen
out = load('values.mat');
T = 0.5;
W = out.w;
m = out.mass;
heffing = out.S.*0.001;
multirise_heffing = [heffing,heffing,heffing,heffing,heffing,heffing,heffing,heffing];
tijd = out.theta/W;
multirise_tijd = [tijd,tijd+0.5,tijd+2*(0.5),tijd+3*(0.5),tijd+4*(0.5),tijd+5*(0.5),tijd+6*(0.5),tijd+7*(0.5)];
% verschil = zeros(length(multirise_tijd),1);
% verschiltijd = zeros(length(multirise_tijd),1);
% xwaarde = zeros(length(multirise_tijd),1);
% for i = 1:(length(multirise_tijd)-2)
%     verschil(i) = multirise_tijd(i+1) - multirise_tijd(i);
%     if i < 36000
%         verschiltijd(i) = tijd(i+1) - tijd(i);
%     end
%     xwaarde(i) = i;
% end
% figure
% hold on
% plot(xwaarde, verschil)
% plot(xwaarde, verschiltijd)
% hold off

%% Dedimensionaliseren
theta = multirise_heffing/0.04;
tau = multirise_tijd/T;

%% Variabelen
t1_sr = 40/(W*180/pi);
zeta = 0.091;
lambda = 0.75/zeta;
kf = m*(lambda*2*pi/t1_sr)^2;
w_n = sqrt(kf/m);
t_n = 2*pi/w_n;
lambda_tilde = T/t_n;

%% Overdrachtsfunctie aanmaken
teller = (2*pi*lambda_tilde)^2;
noemer = [1, 2*zeta*(2*pi*lambda_tilde), (2*pi*lambda_tilde)^2];
sys = tf(teller, noemer);

%% Simulatie
gamma = lsim(sys,theta,tau).';
figure
plot(tau, gamma)
ylabel('gamma')
xlabel('tau')

figure
plot(tau, gamma- theta)
xlabel('tau')
ylabel('gamma-theta')

%% Analytisch 
K = 100;
% Fourierreeks opstellen,
A = zeros(288000,2*K+1); %288000= length( theta), 201 = 2*K+1 met k= 100 slides 2.27 en 9.39
for i= 1:288000
    for j = 1:2*K+1
        if mod( j , 2 ) == 0
            A(i,j) = cos(2*pi*j*tau(i));
        end
        if mod( j , 2 ) == 1
             if j == 1 
                 A(i,j) = 1/2;
             else
                A(i,j) = sin(2*pi*j*tau(i));
             end
        end
    end
end
X = A\transpose(theta);

a_0 = X(1);
coef_a = zeros(201,1);
coef_b = zeros(201,1);
coef_c = zeros(201,1);
coef_d = zeros(201,1);

for i = 2:2*K+1
    if mod(i,2) ==0
        coef_a(i/2) = X(i);
    else
        coef_b((i-1)/2) = X(i);
    end
    
end
% for i = 1:K
%     coef_c(i) = (-2*zeta*i*coef_b(i)/lambda_tilde+(1-(i/lambda_tilde)^2)*coef_a(i))/((2*zeta*i/lambda_tilde)^2 + (1-(i/lambda_tilde)^2)^2);
%     coef_d(i) = (2*zeta*i*coef_a(i)/lambda_tilde+(1-(i/lambda_tilde)^2)*coef_b(i))/((2*zeta*i/lambda_tilde)^2 + (1-(i/lambda_tilde)^2)^2);   
% end
% 
% gamma_analytisch = zeros(288000,1);
% for i = 1:288000
%     som = 0;
%     for j = 1:K
%         som = som + coef_c(j)*cos(2*pi*j*tau(i)) + coef_d(j)*sin(2*pi*j*tau(i));
%     end
%     gamma_analytisch(i) = a_0/2 + som;
% end
theta_analytisch = zeros(288000,1);
for i = 1:288000
    som = 0;
    for j = 1:K
        som = som + coef_a(j)*cos(2*pi*j*tau(i)) + coef_b(j)*sin(2*pi*j*tau(i));
    end
    theta_analytisch(i) = a_0/2 + som;
end
figure 
hold on
plot(tau, theta_analytisch)
xlabel('tau')
ylabel('theta_{analytisch}')
plot(tau, theta)
hold off


% figure
% plot(tau, gamma_analytisch)
% xlabel('tau')
% ylabel('gamma_{analytisch}')
% figure
% plot(tau, gamma - transpose(gamma_analytisch))
% xlabel('tau')
% ylabel('gamma-gamma_{analytisch}')
        



